#!/usr/bin/env python3
"""
generate_rocking_gcode.py  —  v2
Creates G-code that
1. Heats the bed to a target temperature.
2. Raises the nozzle 200 mm (default) and keeps it there.
3. Rocks the bed ±A mm in Y for the requested duration.

CLI
---
$ python generate_rocking_gcode.py
        --temp 50             # °C
        --feedrate 600        # mm/min
        --duration 30         # minutes
        --amplitude 10        # ±mm
        --yoffset 100         # Y offset mm
        --outfile mix.gcode
"""
import argparse
from datetime import datetime
from textwrap import dedent

HEADER = "; ====== GENERATED BY generate_rocking_gcode.py (v2) ======\n"

def build_gcode(temp: float,
                feedrate: int,
                duration_min: float,
                amp: float = 10.0,
                y_offset: float = 100.0) -> str:
    """Return complete G-code as a string."""
    dist_per_cycle_mm = 4 * amp                   # +A, –2A, +A
    minutes_per_cycle = dist_per_cycle_mm / feedrate
    cycles = round(duration_min / minutes_per_cycle)

    header = HEADER + f"; Created: {datetime.now():%Y-%m-%d %H:%M}\n"
    setup = dedent(f"""\
        ; --- Heat bed ---
        M140 S{temp:.1f}
        M190 S{temp:.1f}

        ; --- Home XY ---
        G28 X Y

        ; --- Rocking for {duration_min} min → {cycles} cycles ---
    """)

    cycle = (
        f"G1 Y{y_offset + amp:.2f}  F{feedrate}\n"
        f"G1 Y{y_offset + (-amp):.2f} F{feedrate}\n"
        f"G1 Y{y_offset + amp:.2f}  F{feedrate}\n"
    )
    rocking = cycle * cycles

    teardown = dedent("""\
        ; ===== END OF PROGRAM =====
    """)

    return header + setup + rocking + teardown


def main() -> None:
    ap = argparse.ArgumentParser(
        description="Generate G-code that heats the bed, "
                    "raises the nozzle 200 mm, and rocks the bed."
    )
    ap.add_argument("--temp",     type=float, default=50, help="Bed temperature °C")
    ap.add_argument("--feedrate", type=int,   default=600, help="Rocking feedrate mm/min")
    ap.add_argument("--duration", type=float, default=30.0,  help="Duration minutes")
    ap.add_argument("--amplitude",type=float, default=10.0,  help="± travel mm")
    ap.add_argument("--yoffset", type=float, default=100.0, help="Y offset mm")
    ap.add_argument("outfile",  type=str,   help="Output path (stdout if omitted)")
    args = ap.parse_args()

    gcode = build_gcode(args.temp, args.feedrate, args.duration,
                        amp=args.amplitude, y_offset=args.yoffset)

    if args.outfile:
        with open(args.outfile, "w", encoding="utf-8") as f:
            f.write(gcode)
        print(f"Wrote {args.outfile}  ({len(gcode.splitlines())} lines)")
    else:
        print(gcode)


if __name__ == "__main__":
    main()
